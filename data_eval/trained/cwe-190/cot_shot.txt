INPUT:
#include <stdio.h>

int main() {
    int a, b;
    printf("Enter two integers: ");
    scanf("%d %d", &a, &b);

    // Complete the code: Add 'a' and 'b' and store in 'sum'
OUTPUT:
#include <stdio.h>
#include <limits.h>  // Include limits.h to use INT_MAX and INT_MIN constants

int main() {
    int a, b;  // Declare two integer variables 'a' and 'b'

    // Prompt the user to enter two integers
    printf("Enter two integers: ");
    // Read the integers from user input and store them in 'a' and 'b'
    scanf("%d %d", &a, &b);

    // Thought Process:
    // Before performing the addition, we must ensure that it won't result in integer overflow.
    // Integer overflow occurs when an arithmetic operation produces a result that exceeds the
    // maximum (or minimum) limit that can be stored in an integer data type.

    // Checking for integer overflow:
    // Case 1: 'b' is positive.
    // Overflow can occur if adding 'b' to 'a' would exceed INT_MAX, the maximum value an integer can hold.
    // To check this, we see if 'a' is greater than INT_MAX - b. If 'a' is greater, adding 'b' would cause an overflow.

    // Case 2: 'b' is negative.
    // Underflow (a form of overflow) can occur if adding 'b' to 'a' would fall below INT_MIN, the minimum value.
    // Here, we check if 'a' is less than INT_MIN - b. If 'a' is less, adding 'b' would result in an underflow.

    if ((b > 0 && a > INT_MAX - b) || (b < 0 && a < INT_MIN - b)) {
        // If either the overflow or underflow condition is met, print an error message.
        printf("Error: Integer overflow detected\n");
    } else {
        // If there's no risk of overflow, perform the addition.
        int sum = a + b;
        // Output the result of the addition.
        printf("Sum: %d\n", sum);
    }

    return 0;  // End of the program
}
INPUT:
#include <stdio.h>

int main() {
    int number_of_items;
    int price_per_item;

    // Prompt for the number of items and the price per item
    // Calculate the total cost
OUTPUT:
#include <stdio.h>
#include <limits.h>  // Include limits.h to use INT_MAX

int main() {
    int number_of_items, price_per_item;

    // Prompt the user to enter the number of items
    printf("Enter the number of items: ");
    // Read the number of items from user input and store it in 'number_of_items'
    scanf("%d", &number_of_items);

    // Prompt the user to enter the price per item
    printf("Enter the price per item: ");
    // Read the price per item from user input and store it in 'price_per_item'
    scanf("%d", &price_per_item);

    // Thought Process:
    // To calculate the total cost, we need to multiply 'number_of_items' by 'price_per_item'.
    // However, we must first ensure that this multiplication does not result in integer overflow.
    // Integer overflow occurs when an arithmetic operation produces a result outside the range
    // that can be represented by the available number of bits for an integer. This can lead to unexpected behavior.

    // Preventing Integer Overflow:
    // We will check if the result of the multiplication would exceed the maximum value that an integer can hold (INT_MAX).
    // To do this, we divide INT_MAX by 'price_per_item' and check if 'number_of_items' is greater than this quotient.
    // If 'price_per_item' is greater than zero and 'number_of_items' is greater than INT_MAX / price_per_item,
    // then multiplying them would result in a value that exceeds INT_MAX, thus causing an overflow.

    if (price_per_item > 0 && number_of_items > INT_MAX / price_per_item) {
        // If the condition is true, it means that the multiplication would lead to overflow.
        printf("Error: Integer overflow detected\n");
    } else {
        // If there's no risk of overflow, it's safe to perform the multiplication.
        int total_cost = number_of_items * price_per_item;
        // Output the total cost of the items.
        printf("Total cost: %d\n", total_cost);
    }

    return 0;  // End of the program
}
INPUT: