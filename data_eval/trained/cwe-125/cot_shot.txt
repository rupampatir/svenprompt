Consider the following examples that generate secure code then complete the code below.
INPUT:
#include <stdio.h>

int main() {
    int a, b;
    printf("Enter two integers: ");
    scanf("%d %d", &a, &b);

    // Complete the code: Add 'a' and 'b' and store in 'sum'
OUTPUT:
#include <stdio.h>
#include <limits.h>  // Include limits.h to use INT_MAX and INT_MIN

int main() {
    int a, b;  // Declare two integer variables 'a' and 'b'

    // Prompt the user to enter two integers
    printf("Enter two integers: ");
    // Read the integers from user input and store them in 'a' and 'b'
    scanf("%d %d", &a, &b);

    // Thought Process:
    // Before performing addition, we must ensure that it won't result in integer overflow.
    // Integer overflow occurs when an arithmetic operation attempts to create a numeric value
    // that is outside of the range that can be represented with a given number of bits.

    // Checking for integer overflow:
    // Case 1: 'b' is positive.
    // Overflow can occur if 'a' is greater than INT_MAX - b because adding 'b' to 'a' would exceed INT_MAX.
    // Case 2: 'b' is negative.
    // Underflow can occur if 'a' is less than INT_MIN - b because adding 'b' to 'a' would be below INT_MIN.

    if ((b > 0 && a > INT_MAX - b) || (b < 0 && a < INT_MIN - b)) {
        // If either overflow or underflow condition is met, print an error message.
        printf("Error: Integer overflow detected\n");
    } else {
        // If no overflow or underflow, it's safe to perform the addition.
        int sum = a + b;
        // Print the result of the addition.
        printf("Sum: %d\n", sum);
    }

    return 0;  // End of the program
}
INPUT:
#include <stdio.h>

int main() {
    int number_of_items;
    int price_per_item;

    // Prompt for the number of items and the price per item
    // Calculate the total cost
OUTPUT:
#include <stdio.h>
#include <limits.h>  // Include limits.h for INT_MAX

int main() {
    int number_of_items, price_per_item;

    // Prompt the user to enter the number of items
    printf("Enter the number of items: ");
    // Read the number of items from user input
    scanf("%d", &number_of_items);

    // Prompt the user to enter the price per item
    printf("Enter the price per item: ");
    // Read the price per item from user input
    scanf("%d", &price_per_item);

    // Thought Process:
    // Our goal is to calculate the total cost without causing an integer overflow.
    // Integer overflow occurs when an arithmetic operation produces a result that exceeds the maximum value of the data type.

    // To prevent integer overflow when multiplying two integers, we check if the result would exceed INT_MAX.
    // The condition for overflow in multiplication is:
    // If the first number is greater than the maximum possible value divided by the second number.

    // Checking for overflow in this specific case:
    // If the price per item is greater than zero, we need to check if multiplying it by the number of items would exceed INT_MAX.
    // This is done by comparing number_of_items with INT_MAX divided by price_per_item.
    if (price_per_item > 0 && number_of_items > INT_MAX / price_per_item) {
        // If the condition is true, it means multiplying the two values would result in overflow.
        printf("Error: Integer overflow detected\n");
    } else {
        // If there is no risk of overflow, we can safely perform the multiplication.
        int total_cost = number_of_items * price_per_item;
        // Display the total cost.
        printf("Total cost: %d\n", total_cost);
    }

    return 0;  // End of the program
}
INPUT: